/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createUntypedNodeFromDiscriminatorValue, type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter, type UntypedNode } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Exception_data}
 */
// @ts-ignore
export function createException_dataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoException_data;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Exception}
 */
// @ts-ignore
export function createExceptionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoException;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProblemOriginInformation}
 */
// @ts-ignore
export function createProblemOriginInformationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProblemOriginInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResultProblem}
 */
// @ts-ignore
export function createResultProblemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResultProblem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RunCommandRequest}
 */
// @ts-ignore
export function createRunCommandRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRunCommandRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SuccessResponse}
 */
// @ts-ignore
export function createSuccessResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSuccessResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoException(exception: Partial<Exception> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { exception.data = n.getObjectValue<Exception_data>(createException_dataFromDiscriminatorValue); },
        "helpLink": n => { exception.helpLink = n.getStringValue(); },
        "hResult": n => { exception.hResult = n.getNumberValue(); },
        "innerException": n => { exception.innerException = n.getObjectValue<Exception>(createExceptionFromDiscriminatorValue); },
        "message": n => { exception.message = n.getStringValue(); },
        "source": n => { exception.source = n.getStringValue(); },
        "stackTrace": n => { exception.stackTrace = n.getStringValue(); },
        "targetSite": n => { exception.targetSite = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoException_data(exception_data: Partial<Exception_data> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProblemOriginInformation(problemOriginInformation: Partial<ProblemOriginInformation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "filePath": n => { problemOriginInformation.filePath = n.getStringValue(); },
        "lineNumber": n => { problemOriginInformation.lineNumber = n.getNumberValue(); },
        "linkString": n => { problemOriginInformation.linkString = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResultProblem(resultProblem: Partial<ResultProblem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "args": n => { resultProblem.args = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "exception": n => { resultProblem.exception = n.getObjectValue<Exception>(createExceptionFromDiscriminatorValue); },
        "message": n => { resultProblem.messageEscaped = n.getStringValue(); },
        "originInformation": n => { resultProblem.originInformation = n.getObjectValue<ProblemOriginInformation>(createProblemOriginInformationFromDiscriminatorValue); },
        "severity": n => { resultProblem.severity = n.getNumberValue(); },
        "source": n => { resultProblem.source = n.getStringValue(); },
        "tags": n => { resultProblem.tags = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRunCommandRequest(runCommandRequest: Partial<RunCommandRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "command": n => { runCommandRequest.command = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSuccessResponse(successResponse: Partial<SuccessResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "success": n => { successResponse.success = n.getBooleanValue(); },
    }
}
export interface Exception extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The data property
     */
    data?: Exception_data | null;
    /**
     * The helpLink property
     */
    helpLink?: string | null;
    /**
     * The hResult property
     */
    hResult?: number | null;
    /**
     * The innerException property
     */
    innerException?: Exception | null;
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The source property
     */
    source?: string | null;
    /**
     * The stackTrace property
     */
    stackTrace?: string | null;
    /**
     * The targetSite property
     */
    targetSite?: UntypedNode | null;
}
export interface Exception_data extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface ProblemOriginInformation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filePath property
     */
    filePath?: string | null;
    /**
     * The lineNumber property
     */
    lineNumber?: number | null;
    /**
     * The linkString property
     */
    linkString?: string | null;
}
export interface ResultProblem extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The args property
     */
    args?: UntypedNode | null;
    /**
     * The exception property
     */
    exception?: Exception | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The originInformation property
     */
    originInformation?: ProblemOriginInformation | null;
    /**
     * The severity property
     */
    severity?: number | null;
    /**
     * The source property
     */
    source?: string | null;
    /**
     * The tags property
     */
    tags?: string[] | null;
}
export interface RunCommandRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The command property
     */
    command?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeException(writer: SerializationWriter, exception: Partial<Exception> | undefined | null = {}) : void {
    if (exception) {
        writer.writeObjectValue<Exception_data>("data", exception.data, serializeException_data);
        writer.writeStringValue("helpLink", exception.helpLink);
        writer.writeNumberValue("hResult", exception.hResult);
        writer.writeObjectValue<Exception>("innerException", exception.innerException, serializeException);
        writer.writeStringValue("message", exception.message);
        writer.writeStringValue("source", exception.source);
        writer.writeStringValue("stackTrace", exception.stackTrace);
        writer.writeObjectValue("targetSite", exception.targetSite);
        writer.writeAdditionalData(exception.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeException_data(writer: SerializationWriter, exception_data: Partial<Exception_data> | undefined | null = {}) : void {
    if (exception_data) {
        writer.writeAdditionalData(exception_data.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProblemOriginInformation(writer: SerializationWriter, problemOriginInformation: Partial<ProblemOriginInformation> | undefined | null = {}) : void {
    if (problemOriginInformation) {
        writer.writeStringValue("filePath", problemOriginInformation.filePath);
        writer.writeNumberValue("lineNumber", problemOriginInformation.lineNumber);
        writer.writeStringValue("linkString", problemOriginInformation.linkString);
        writer.writeAdditionalData(problemOriginInformation.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResultProblem(writer: SerializationWriter, resultProblem: Partial<ResultProblem> | undefined | null = {}) : void {
    if (resultProblem) {
        writer.writeObjectValue("args", resultProblem.args);
        writer.writeObjectValue<Exception>("exception", resultProblem.exception, serializeException);
        writer.writeStringValue("message", resultProblem.messageEscaped);
        writer.writeObjectValue<ProblemOriginInformation>("originInformation", resultProblem.originInformation, serializeProblemOriginInformation);
        writer.writeNumberValue("severity", resultProblem.severity);
        writer.writeStringValue("source", resultProblem.source);
        writer.writeCollectionOfPrimitiveValues<string>("tags", resultProblem.tags);
        writer.writeAdditionalData(resultProblem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRunCommandRequest(writer: SerializationWriter, runCommandRequest: Partial<RunCommandRequest> | undefined | null = {}) : void {
    if (runCommandRequest) {
        writer.writeStringValue("command", runCommandRequest.command);
        writer.writeAdditionalData(runCommandRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSuccessResponse(writer: SerializationWriter, successResponse: Partial<SuccessResponse> | undefined | null = {}) : void {
    if (successResponse) {
        writer.writeBooleanValue("success", successResponse.success);
        writer.writeAdditionalData(successResponse.additionalData);
    }
}
export interface SuccessResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The success property
     */
    success?: boolean | null;
}
/* tslint:enable */
/* eslint-enable */
